from tensorflow.keras.models import load_model
from tensorflow.keras import backend as K
import tensorflow as tf
import matplotlib.pyplot as plt
import numpy as np
# Load image
img_lst = '95-8-6-1_1_2.jpg'

img = tf.io.read_file(img_lst)
img1 = tf.image.decode_jpeg(img)
img2 = tf.keras.layers.Lambda(lambda x: x / 255)(img1)
img3 = tf.image.resize(img2, [256, 256])
img4 = tf.image.rgb_to_grayscale(img3)  # Convert to grayscale (single channel)

# Convert grayscale to 3 channels
img4_rgb = tf.image.grayscale_to_rgb(img4)  # Create a 3-channel image from the grayscale image

# Add batch dimension
img4_rgb = tf.expand_dims(img4_rgb, axis=0)  # This will change the shape to (1, 256, 256, 3)

plt.subplot(131)
plt.imshow(tf.squeeze(img4_rgb).numpy())
plt.title('Original Image')

# Load mask
msk_lst = '95-8-6-1_1_2.tif'

msk = plt.imread(msk_lst)
msk1 = np.expand_dims(msk, axis=-1)
msk2 = tf.image.resize(msk1, [256, 256])

plt.subplot(133)
plt.imshow(msk2, cmap='gray')
plt.title('Mask')

import tensorflow.keras.utils as utils

def fixed_conv2d_transpose(*args, **kwargs):
    kwargs.pop('groups', None)  # Remove the problematic 'groups' parameter
    return tf.keras.layers.Conv2DTranspose(*args, **kwargs)

model_2 = load_model('Blood cell_unet-model_2.h5', 
                    custom_objects={'Conv2DTranspose': fixed_conv2d_transpose}, 
                    compile=False)

pre_dat = model_2.predict(img4_rgb)

# Plot predicted mask
plt.subplot(132)
plt.imshow(pre_dat[0], cmap='gray')
plt.title('Predicted Mask')